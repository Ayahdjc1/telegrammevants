import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.enums import ParseMode
from sqlalchemy import create_engine, Column, Integer, String, Date, ForeignKey, DateTime
from sqlalchemy.orm import sessionmaker, declarative_base, relationship
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
import os
import csv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è --- #
load_dotenv()
TOKEN = "7948057141:AAEgI_k8mtGdYMZA9wYXKT7jgdzvuOYaIAA"
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "1077073462").split(",")))

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î --- #
Base = declarative_base()
engine = create_engine("sqlite:///events.db")
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    tg_id = Column(Integer, unique=True)
    full_name = Column(String)
    registrations = relationship("Registration", back_populates="user")

class Event(Base):
    __tablename__ = 'events'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    topic = Column(String)
    description = Column(String)
    date = Column(Date)
    registrations = relationship("Registration", back_populates="event")

class Registration(Base):
    __tablename__ = 'registrations'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    event_id = Column(Integer, ForeignKey('events.id'))
    registered_at = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="registrations")
    event = relationship("Event", back_populates="registrations")

Base.metadata.create_all(engine)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- #
def is_admin(user_id):
    return user_id in ADMIN_IDS

def format_event_short(event):
    return (f"<b>{event.title}</b>\n"
            f"üìÖ {event.date.strftime('%d.%m.%Y')}\n"
            f"üè∑Ô∏è –¢–µ–º–∞: {event.topic}")

def format_event_full(event):
    return (f"<b>{event.title}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n"
            f"üè∑Ô∏è –¢–µ–º–∞: {event.topic}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{event.description}\n\n"
            f"üÜî ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: <code>{event.id}</code>")

def format_registration(reg):
    return (f"‚Ä¢ {reg.event.title} (ID: {reg.event.id})\n"
            f"  –î–∞—Ç–∞: {reg.event.date.strftime('%d.%m.%Y')}\n"
            f"  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg.registered_at.strftime('%d.%m.%Y %H:%M')}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- #
def get_main_keyboard(is_admin=False):
    buttons = [
        [KeyboardButton(text="üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")],
        [KeyboardButton(text="üé´ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    if is_admin:
        buttons.insert(0, [KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_admin_keyboard():
    buttons = [
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
        [KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π")],
        [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
        [KeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")],
        [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

def get_event_list_keyboard(events):
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(
            text=f"{event.title}",
            callback_data=f"event_select_{event.id}"
        )
    builder.adjust(1)
    return builder.as_markup()

def get_event_details_keyboard(event_id, is_registered=False):
    builder = InlineKeyboardBuilder()
    
    if not is_registered:
        builder.button(
            text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", 
            callback_data=f"event_register_{event_id}"
        )
    
    builder.button(
        text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ" if not is_registered else "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        callback_data=f"event_details_{event_id}"
    )
    
    builder.button(
        text="üîô –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
        callback_data="back_to_events"
    )
    builder.adjust(1)
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #
@dp.message(Command("start"))
async def start(message: types.Message):
    session = Session()
    if not session.query(User).filter_by(tg_id=message.from_user.id).first():
        user = User(tg_id=message.from_user.id, full_name=message.from_user.full_name)
        session.add(user)
        session.commit()
    session.close()
    
    text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏!\n\n"
            "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
            "üìé –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    await message.answer(text, reply_markup=get_main_keyboard(is_admin(message.from_user.id)), parse_mode=ParseMode.HTML)

@dp.message(Command("menu"))
async def show_menu(message: types.Message):
    await message.answer("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(is_admin(message.from_user.id)))

@dp.message(Command("help"))
async def help_command(message: types.Message):
    text = ("<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            "‚Ä¢ üé´ –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n"
            "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "‚Ä¢ üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
            "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ\n"
            "‚Ä¢ üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π - –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n\n"
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é!")
    
    await message.answer(text, parse_mode=ParseMode.HTML)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ --- #
@dp.message(F.text == "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def list_events(message: types.Message):
    session = Session()
    today = date.today()
    events = session.query(Event).filter(Event.date >= today).order_by(Event.date).all()
    
    if not events:
        await message.answer("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=get_main_keyboard(is_admin(message.from_user.id)))
        return
    
    text = "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
    for idx, event in enumerate(events, 1):
        text += (f"{idx}. {format_event_short(event)}\n\n")
    
    await message.answer(
        text,
        reply_markup=get_event_list_keyboard(events),
        parse_mode=ParseMode.HTML
    )
    session.close()

@dp.message(F.text == "üé´ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def my_events(message: types.Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    regs = session.query(Registration).filter_by(user_id=user.id).all()
    
    if not regs:
        text = "üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        await message.answer(text, reply_markup=get_main_keyboard(is_admin(message.from_user.id)))
        return
    
    text = "üé´ <b>–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
    for reg in regs:
        text += format_registration(reg) + "\n\n"
    
    builder = InlineKeyboardBuilder()
    for reg in regs:
        builder.button(
            text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {reg.event.title}",
            callback_data=f"cancel_{reg.id}"
        )
    builder.adjust(1)
    
    await message.answer(
        text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    session.close()

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def cancel_all_registrations(message: types.Message):
    session = Session()
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    regs = session.query(Registration).filter_by(user_id=user.id).all()
    
    if not regs:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.", reply_markup=get_main_keyboard(is_admin(message.from_user.id)))
        return
    
    for reg in regs:
        session.delete(reg)
    session.commit()
    
    await message.answer("‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.", reply_markup=get_main_keyboard(is_admin(message.from_user.id)))
    session.close()

@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=get_main_keyboard(False))
        return
    
    text = "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(text, reply_markup=get_admin_keyboard(), parse_mode=ParseMode.HTML)

@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=get_main_keyboard(False))
        return
    
    text = ("‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ;–¢–µ–º–∞;–û–ø–∏—Å–∞–Ω–∏–µ;–ì–ì–ì–ì-–ú–ú-–î–î</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–í—Å—Ç—Ä–µ—á–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤;IT;–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π;2024-12-15</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîô –ù–∞–∑–∞–¥'")
    
    await message.answer(text, reply_markup=get_back_keyboard(), parse_mode=ParseMode.HTML)

@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π")
async def export_event_users(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=get_main_keyboard(False))
        return
    
    session = Session()
    events = session.query(Event).all()
    
    if not events:
        await message.answer("üì≠ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", reply_markup=get_admin_keyboard())
        return
    
    text = "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(
            text=f"{event.title} ({event.date.strftime('%d.%m.%Y')})",
            callback_data=f"export_{event.id}"
        )
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    session.close()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def delete_event_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=get_main_keyboard(False))
        return
    
    session = Session()
    events = session.query(Event).order_by(Event.date).all()
    
    if not events:
        await message.answer("üì≠ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_admin_keyboard())
        return
    
    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(
            text=f"{event.title} ({event.date.strftime('%d.%m.%Y')})",
            callback_data=f"delete_{event.id}"
        )
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    session.close()

@dp.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")
async def show_users_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", reply_markup=get_main_keyboard(False))
        return
    
    session = Session()
    events = session.query(Event).order_by(Event.date).all()
    
    if not events:
        await message.answer("üì≠ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=get_admin_keyboard())
        return
    
    text = "üë• <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:"
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(
            text=f"{event.title} ({len(event.registrations)})",
            callback_data=f"users_{event.id}"
        )
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)
    session.close()

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())
    else:
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(False))

@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(is_admin(message.from_user.id)))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–æ–≤—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ") --- #
@dp.callback_query(F.data.startswith("event_select_"))
async def event_select(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[2])
    session = Session()
    event = session.query(Event).get(event_id)
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered = session.query(Registration).filter_by(
        user_id=user.id, 
        event_id=event_id
    ).first() is not None
    
    text = format_event_short(event)
    session.close()
    
    await callback.message.edit_text(
        text,
        reply_markup=get_event_details_keyboard(event_id, is_registered),
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data.startswith("event_details_"))
async def event_details(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[2])
    session = Session()
    event = session.query(Event).get(event_id)
    user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_registered = session.query(Registration).filter_by(
        user_id=user.id, 
        event_id=event_id
    ).first() is not None
    
    text = format_event_full(event)
    session.close()
    
    await callback.message.edit_text(
        text,
        reply_markup=get_event_details_keyboard(event_id, is_registered),
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data.startswith("event_register_"))
async def register_callback(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[2])
    session = Session()
    
    try:
        user = session.query(User).filter_by(tg_id=callback.from_user.id).first()
        event = session.query(Event).get(event_id)
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        existing = session.query(Registration).filter_by(user_id=user.id, event_id=event_id).first()
        
        if existing:
            await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
            return
        
        reg = Registration(user_id=user.id, event_id=event_id)
        session.add(reg)
        session.commit()
        
        text = (f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.title}</b>\n"
                f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n\n"
                f"–ó–∞–ø–∏—Å—å ‚Ññ: <code>{reg.id}</code>")
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_events"),
                InlineKeyboardButton(text="üìã –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="back_to_events")
            ]]),
            parse_mode=ParseMode.HTML
        )
    finally:
        session.close()

@dp.callback_query(F.data == "back_to_events")
async def back_to_events(callback: types.CallbackQuery):
    session = Session()
    today = date.today()
    events = session.query(Event).filter(Event.date >= today).order_by(Event.date).all()
    
    if not events:
        await callback.message.edit_text("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    text = "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
    for idx, event in enumerate(events, 1):
        text += (f"{idx}. {format_event_short(event)}\n\n")
    
    await callback.message.edit_text(
        text,
        reply_markup=get_event_list_keyboard(events),
        parse_mode=ParseMode.HTML
    )
    session.close()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --- #
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_registration(callback: types.CallbackQuery):
    reg_id = int(callback.data.split("_")[1])
    session = Session()
    
    try:
        reg = session.query(Registration).get(reg_id)
        if not reg:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        if reg.user.tg_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å!")
            return
        
        event_title = reg.event.title
        session.delete(reg)
        session.commit()
        
        text = f"‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{event_title}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞."
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_events")
            ]]),
            parse_mode=ParseMode.HTML
        )
    finally:
        session.close()

@dp.callback_query(F.data.startswith("export_"))
async def perform_export(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    session = Session()
    event = session.query(Event).get(event_id)
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    filename = f"participants_{event_id}.csv"
    with open(filename, "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["ID", "–§–ò–û", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"])
        
        for reg in event.registrations:
            writer.writerow([
                reg.user.tg_id,
                reg.user.full_name,
                reg.registered_at.strftime("%Y-%m-%d %H:%M")
            ])
    
    text = f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.title}</b>\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event.registrations)}"
    await callback.message.answer_document(
        types.FSInputFile(filename),
        caption=text,
        parse_mode=ParseMode.HTML
    )
    session.close()

@dp.callback_query(F.data.startswith("delete_"))
async def confirm_delete(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    session = Session()
    event = session.query(Event).get(event_id)
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    text = (f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.title}</b>\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event.registrations)}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{event_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]]
        ),
        parse_mode=ParseMode.HTML
    )
    session.close()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def perform_delete(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[2])
    session = Session()
    event = session.query(Event).get(event_id)
    
    if event:
        title = event.title
        session.delete(event)
        session.commit()
        text = f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{title}</b> —É–¥–∞–ª–µ–Ω–æ!"
    else:
        text = "‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ]]),
        parse_mode=ParseMode.HTML
    )
    session.close()

@dp.callback_query(F.data.startswith("users_"))
async def show_event_users(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    session = Session()
    event = session.query(Event).get(event_id)
    
    if not event:
        await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    registrations = event.registrations
    if not registrations:
        text = f"üì≠ –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{event.title}</b> –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è."
    else:
        text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.title}</b>\n\n"
        for reg in registrations:
            text += f"‚Ä¢ {reg.user.full_name} (ID: {reg.user.tg_id})\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"export_{event_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_users")
        ]]),
        parse_mode=ParseMode.HTML
    )
    session.close()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π --- #
@dp.message(F.text.contains(';'))
async def handle_event_creation(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    parts = message.text.split(';')
    if len(parts) != 4:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 4 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ';'", reply_markup=get_admin_keyboard())
        return
    
    try:
        title, topic, description, raw_date = [part.strip() for part in parts]
        event_date = datetime.strptime(raw_date, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î", reply_markup=get_admin_keyboard())
        return
    
    session = Session()
    event = Event(
        title=title,
        topic=topic,
        description=description,
        date=event_date
    )
    session.add(event)
    session.commit()
    
    text = (f"‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"ID: <code>{event.id}</code>\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
            f"–î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}")
    
    await message.answer(text, reply_markup=get_admin_keyboard(), parse_mode=ParseMode.HTML)
    session.close()

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è --- #
async def notify_users():
    session = Session()
    tomorrow = date.today() + timedelta(days=1)
    events = session.query(Event).filter_by(date=tomorrow).all()
    
    for event in events:
        for reg in event.registrations:
            try:
                await bot.send_message(
                    reg.user.tg_id,
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>\n\n"
                    f"–ó–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è: <b>{event.title}</b>\n"
                    f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏!",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    session.close()

# --- –ó–∞–ø—É—Å–∫ --- #
async def main():
    scheduler.add_job(notify_users, 'cron', hour=9, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
